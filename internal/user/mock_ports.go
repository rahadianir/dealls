// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/ports.go
//
// Generated by this command:
//
//	mockgen -source internal/user/ports.go -destination internal/user/mock_ports.go -package user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	models "github.com/rahadianir/dealls/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAdminRole mocks base method.
func (m *MockUserRepositoryInterface) GetAdminRole(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminRole", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminRole indicates an expected call of GetAdminRole.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetAdminRole(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminRole", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetAdminRole), ctx)
}

// GetUserDetailsByUsername mocks base method.
func (m *MockUserRepositoryInterface) GetUserDetailsByUsername(ctx context.Context, username string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsByUsername", ctx, username)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailsByUsername indicates an expected call of GetUserDetailsByUsername.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserDetailsByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsByUsername", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserDetailsByUsername), ctx, username)
}

// GetUserRolesbyID mocks base method.
func (m *MockUserRepositoryInterface) GetUserRolesbyID(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRolesbyID", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRolesbyID indicates an expected call of GetUserRolesbyID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUserRolesbyID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRolesbyID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUserRolesbyID), ctx, userID)
}

// GetUsersSalaryByIDs mocks base method.
func (m *MockUserRepositoryInterface) GetUsersSalaryByIDs(ctx context.Context, userIDs []string) ([]models.UserSalary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersSalaryByIDs", ctx, userIDs)
	ret0, _ := ret[0].([]models.UserSalary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersSalaryByIDs indicates an expected call of GetUsersSalaryByIDs.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetUsersSalaryByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersSalaryByIDs", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetUsersSalaryByIDs), ctx, userIDs)
}

// IsAdmin mocks base method.
func (m *MockUserRepositoryInterface) IsAdmin(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockUserRepositoryInterfaceMockRecorder) IsAdmin(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).IsAdmin), ctx, userID)
}

// MockUserLogicInterface is a mock of UserLogicInterface interface.
type MockUserLogicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserLogicInterfaceMockRecorder
	isgomock struct{}
}

// MockUserLogicInterfaceMockRecorder is the mock recorder for MockUserLogicInterface.
type MockUserLogicInterfaceMockRecorder struct {
	mock *MockUserLogicInterface
}

// NewMockUserLogicInterface creates a new mock instance.
func NewMockUserLogicInterface(ctrl *gomock.Controller) *MockUserLogicInterface {
	mock := &MockUserLogicInterface{ctrl: ctrl}
	mock.recorder = &MockUserLogicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLogicInterface) EXPECT() *MockUserLogicInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserLogicInterface) Login(ctx context.Context, username, password string) (LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserLogicInterfaceMockRecorder) Login(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserLogicInterface)(nil).Login), ctx, username, password)
}
