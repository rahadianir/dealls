// Code generated by MockGen. DO NOT EDIT.
// Source: internal/attendance/ports.go
//
// Generated by this command:
//
//	mockgen -source internal/attendance/ports.go -destination internal/attendance/mock_ports.go -package attendance
//

// Package attendance is a generated GoMock package.
package attendance

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/rahadianir/dealls/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAttendanceRepositoryInterface is a mock of AttendanceRepositoryInterface interface.
type MockAttendanceRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockAttendanceRepositoryInterfaceMockRecorder is the mock recorder for MockAttendanceRepositoryInterface.
type MockAttendanceRepositoryInterfaceMockRecorder struct {
	mock *MockAttendanceRepositoryInterface
}

// NewMockAttendanceRepositoryInterface creates a new mock instance.
func NewMockAttendanceRepositoryInterface(ctrl *gomock.Controller) *MockAttendanceRepositoryInterface {
	mock := &MockAttendanceRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockAttendanceRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceRepositoryInterface) EXPECT() *MockAttendanceRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAllUserAttendancesByPeriod mocks base method.
func (m *MockAttendanceRepositoryInterface) GetAllUserAttendancesByPeriod(ctx context.Context, start, end time.Time) ([]models.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserAttendancesByPeriod", ctx, start, end)
	ret0, _ := ret[0].([]models.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserAttendancesByPeriod indicates an expected call of GetAllUserAttendancesByPeriod.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) GetAllUserAttendancesByPeriod(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserAttendancesByPeriod", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).GetAllUserAttendancesByPeriod), ctx, start, end)
}

// GetAllUserOvertimesByPeriod mocks base method.
func (m *MockAttendanceRepositoryInterface) GetAllUserOvertimesByPeriod(ctx context.Context, start, end time.Time) ([]models.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserOvertimesByPeriod", ctx, start, end)
	ret0, _ := ret[0].([]models.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserOvertimesByPeriod indicates an expected call of GetAllUserOvertimesByPeriod.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) GetAllUserOvertimesByPeriod(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserOvertimesByPeriod", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).GetAllUserOvertimesByPeriod), ctx, start, end)
}

// GetAllUserReimbursementsByPeriod mocks base method.
func (m *MockAttendanceRepositoryInterface) GetAllUserReimbursementsByPeriod(ctx context.Context, start, end time.Time) ([]models.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserReimbursementsByPeriod", ctx, start, end)
	ret0, _ := ret[0].([]models.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserReimbursementsByPeriod indicates an expected call of GetAllUserReimbursementsByPeriod.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) GetAllUserReimbursementsByPeriod(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserReimbursementsByPeriod", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).GetAllUserReimbursementsByPeriod), ctx, start, end)
}

// GetUserOvertimeByTime mocks base method.
func (m *MockAttendanceRepositoryInterface) GetUserOvertimeByTime(ctx context.Context, userID string, date time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOvertimeByTime", ctx, userID, date)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOvertimeByTime indicates an expected call of GetUserOvertimeByTime.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) GetUserOvertimeByTime(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOvertimeByTime", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).GetUserOvertimeByTime), ctx, userID, date)
}

// SubmitAttendance mocks base method.
func (m *MockAttendanceRepositoryInterface) SubmitAttendance(ctx context.Context, userID string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", ctx, userID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) SubmitAttendance(ctx, userID, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).SubmitAttendance), ctx, userID, timestamp)
}

// SubmitOvertime mocks base method.
func (m *MockAttendanceRepositoryInterface) SubmitOvertime(ctx context.Context, userID string, hours int, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", ctx, userID, hours, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) SubmitOvertime(ctx, userID, hours, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).SubmitOvertime), ctx, userID, hours, timestamp)
}

// SubmitReimbursement mocks base method.
func (m *MockAttendanceRepositoryInterface) SubmitReimbursement(ctx context.Context, userID string, amount float64, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", ctx, userID, amount, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockAttendanceRepositoryInterfaceMockRecorder) SubmitReimbursement(ctx, userID, amount, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockAttendanceRepositoryInterface)(nil).SubmitReimbursement), ctx, userID, amount, desc)
}

// MockAttendanceLogicInterface is a mock of AttendanceLogicInterface interface.
type MockAttendanceLogicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAttendanceLogicInterfaceMockRecorder
	isgomock struct{}
}

// MockAttendanceLogicInterfaceMockRecorder is the mock recorder for MockAttendanceLogicInterface.
type MockAttendanceLogicInterfaceMockRecorder struct {
	mock *MockAttendanceLogicInterface
}

// NewMockAttendanceLogicInterface creates a new mock instance.
func NewMockAttendanceLogicInterface(ctrl *gomock.Controller) *MockAttendanceLogicInterface {
	mock := &MockAttendanceLogicInterface{ctrl: ctrl}
	mock.recorder = &MockAttendanceLogicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttendanceLogicInterface) EXPECT() *MockAttendanceLogicInterfaceMockRecorder {
	return m.recorder
}

// SubmitAttendance mocks base method.
func (m *MockAttendanceLogicInterface) SubmitAttendance(ctx context.Context, userID, timestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAttendance", ctx, userID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAttendance indicates an expected call of SubmitAttendance.
func (mr *MockAttendanceLogicInterfaceMockRecorder) SubmitAttendance(ctx, userID, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAttendance", reflect.TypeOf((*MockAttendanceLogicInterface)(nil).SubmitAttendance), ctx, userID, timestamp)
}

// SubmitOvertime mocks base method.
func (m *MockAttendanceLogicInterface) SubmitOvertime(ctx context.Context, userID string, hourCount int, finishedOvertimeTimestamp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitOvertime", ctx, userID, hourCount, finishedOvertimeTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitOvertime indicates an expected call of SubmitOvertime.
func (mr *MockAttendanceLogicInterfaceMockRecorder) SubmitOvertime(ctx, userID, hourCount, finishedOvertimeTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitOvertime", reflect.TypeOf((*MockAttendanceLogicInterface)(nil).SubmitOvertime), ctx, userID, hourCount, finishedOvertimeTimestamp)
}

// SubmitReimbursement mocks base method.
func (m *MockAttendanceLogicInterface) SubmitReimbursement(ctx context.Context, userID string, amount float64, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitReimbursement", ctx, userID, amount, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitReimbursement indicates an expected call of SubmitReimbursement.
func (mr *MockAttendanceLogicInterfaceMockRecorder) SubmitReimbursement(ctx, userID, amount, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitReimbursement", reflect.TypeOf((*MockAttendanceLogicInterface)(nil).SubmitReimbursement), ctx, userID, amount, desc)
}
