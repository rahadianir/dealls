// Code generated by MockGen. DO NOT EDIT.
// Source: internal/payroll/ports.go
//
// Generated by this command:
//
//	mockgen -source internal/payroll/ports.go -destination internal/payroll/mock_ports.go -package payroll
//

// Package payroll is a generated GoMock package.
package payroll

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/rahadianir/dealls/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPayrollRepositoryInterface is a mock of PayrollRepositoryInterface interface.
type MockPayrollRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPayrollRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockPayrollRepositoryInterfaceMockRecorder is the mock recorder for MockPayrollRepositoryInterface.
type MockPayrollRepositoryInterfaceMockRecorder struct {
	mock *MockPayrollRepositoryInterface
}

// NewMockPayrollRepositoryInterface creates a new mock instance.
func NewMockPayrollRepositoryInterface(ctrl *gomock.Controller) *MockPayrollRepositoryInterface {
	mock := &MockPayrollRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPayrollRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayrollRepositoryInterface) EXPECT() *MockPayrollRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetActivePayrollPeriod mocks base method.
func (m *MockPayrollRepositoryInterface) GetActivePayrollPeriod(ctx context.Context) (PayrollPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePayrollPeriod", ctx)
	ret0, _ := ret[0].(PayrollPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePayrollPeriod indicates an expected call of GetActivePayrollPeriod.
func (mr *MockPayrollRepositoryInterfaceMockRecorder) GetActivePayrollPeriod(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePayrollPeriod", reflect.TypeOf((*MockPayrollRepositoryInterface)(nil).GetActivePayrollPeriod), ctx)
}

// GetPayslipsSummary mocks base method.
func (m *MockPayrollRepositoryInterface) GetPayslipsSummary(ctx context.Context, payrollID string) ([]models.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayslipsSummary", ctx, payrollID)
	ret0, _ := ret[0].([]models.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayslipsSummary indicates an expected call of GetPayslipsSummary.
func (mr *MockPayrollRepositoryInterfaceMockRecorder) GetPayslipsSummary(ctx, payrollID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayslipsSummary", reflect.TypeOf((*MockPayrollRepositoryInterface)(nil).GetPayslipsSummary), ctx, payrollID)
}

// GetUserPayslipByID mocks base method.
func (m *MockPayrollRepositoryInterface) GetUserPayslipByID(ctx context.Context, userID, payrollID string) (models.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPayslipByID", ctx, userID, payrollID)
	ret0, _ := ret[0].(models.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPayslipByID indicates an expected call of GetUserPayslipByID.
func (mr *MockPayrollRepositoryInterfaceMockRecorder) GetUserPayslipByID(ctx, userID, payrollID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPayslipByID", reflect.TypeOf((*MockPayrollRepositoryInterface)(nil).GetUserPayslipByID), ctx, userID, payrollID)
}

// MarkPayrollProcessed mocks base method.
func (m *MockPayrollRepositoryInterface) MarkPayrollProcessed(ctx context.Context, id string, totalPaid float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPayrollProcessed", ctx, id, totalPaid)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPayrollProcessed indicates an expected call of MarkPayrollProcessed.
func (mr *MockPayrollRepositoryInterfaceMockRecorder) MarkPayrollProcessed(ctx, id, totalPaid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPayrollProcessed", reflect.TypeOf((*MockPayrollRepositoryInterface)(nil).MarkPayrollProcessed), ctx, id, totalPaid)
}

// SetPayrollPeriod mocks base method.
func (m *MockPayrollRepositoryInterface) SetPayrollPeriod(ctx context.Context, data PayrollPeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayrollPeriod", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPayrollPeriod indicates an expected call of SetPayrollPeriod.
func (mr *MockPayrollRepositoryInterfaceMockRecorder) SetPayrollPeriod(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayrollPeriod", reflect.TypeOf((*MockPayrollRepositoryInterface)(nil).SetPayrollPeriod), ctx, data)
}

// StorePayslip mocks base method.
func (m *MockPayrollRepositoryInterface) StorePayslip(ctx context.Context, payslip models.Payslip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePayslip", ctx, payslip)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePayslip indicates an expected call of StorePayslip.
func (mr *MockPayrollRepositoryInterfaceMockRecorder) StorePayslip(ctx, payslip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePayslip", reflect.TypeOf((*MockPayrollRepositoryInterface)(nil).StorePayslip), ctx, payslip)
}

// MockPayrollLogicInterface is a mock of PayrollLogicInterface interface.
type MockPayrollLogicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPayrollLogicInterfaceMockRecorder
	isgomock struct{}
}

// MockPayrollLogicInterfaceMockRecorder is the mock recorder for MockPayrollLogicInterface.
type MockPayrollLogicInterfaceMockRecorder struct {
	mock *MockPayrollLogicInterface
}

// NewMockPayrollLogicInterface creates a new mock instance.
func NewMockPayrollLogicInterface(ctrl *gomock.Controller) *MockPayrollLogicInterface {
	mock := &MockPayrollLogicInterface{ctrl: ctrl}
	mock.recorder = &MockPayrollLogicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayrollLogicInterface) EXPECT() *MockPayrollLogicInterfaceMockRecorder {
	return m.recorder
}

// CalculatePay mocks base method.
func (m *MockPayrollLogicInterface) CalculatePay(ctx context.Context, data PayrollCalculationData) models.Payslip {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePay", ctx, data)
	ret0, _ := ret[0].(models.Payslip)
	return ret0
}

// CalculatePay indicates an expected call of CalculatePay.
func (mr *MockPayrollLogicInterfaceMockRecorder) CalculatePay(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePay", reflect.TypeOf((*MockPayrollLogicInterface)(nil).CalculatePay), ctx, data)
}

// CalculatePayroll mocks base method.
func (m *MockPayrollLogicInterface) CalculatePayroll(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePayroll", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculatePayroll indicates an expected call of CalculatePayroll.
func (mr *MockPayrollLogicInterfaceMockRecorder) CalculatePayroll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePayroll", reflect.TypeOf((*MockPayrollLogicInterface)(nil).CalculatePayroll), ctx)
}

// GetPayrollsSummary mocks base method.
func (m *MockPayrollLogicInterface) GetPayrollsSummary(ctx context.Context) (PayslipSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollsSummary", ctx)
	ret0, _ := ret[0].(PayslipSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollsSummary indicates an expected call of GetPayrollsSummary.
func (mr *MockPayrollLogicInterfaceMockRecorder) GetPayrollsSummary(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollsSummary", reflect.TypeOf((*MockPayrollLogicInterface)(nil).GetPayrollsSummary), ctx)
}

// GetUserPayslipByID mocks base method.
func (m *MockPayrollLogicInterface) GetUserPayslipByID(ctx context.Context, userID string) (models.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPayslipByID", ctx, userID)
	ret0, _ := ret[0].(models.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPayslipByID indicates an expected call of GetUserPayslipByID.
func (mr *MockPayrollLogicInterfaceMockRecorder) GetUserPayslipByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPayslipByID", reflect.TypeOf((*MockPayrollLogicInterface)(nil).GetUserPayslipByID), ctx, userID)
}

// SetPayrollPeriod mocks base method.
func (m *MockPayrollLogicInterface) SetPayrollPeriod(ctx context.Context, start, end time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayrollPeriod", ctx, start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPayrollPeriod indicates an expected call of SetPayrollPeriod.
func (mr *MockPayrollLogicInterfaceMockRecorder) SetPayrollPeriod(ctx, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayrollPeriod", reflect.TypeOf((*MockPayrollLogicInterface)(nil).SetPayrollPeriod), ctx, start, end)
}
